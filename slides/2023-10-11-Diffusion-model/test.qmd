---
filters:
  - pseudocode
revealjs-plugins:
  - my-revealjs
embed-resources: false
# format: native
---

## 1

```pseudocode
#| label: alg-test-text-style
#| html-indent-size: "1.5em"
#| html-comment-delimiter: "â–·"
#| html-line-number: true
#| html-line-number-punc: ":"
#| html-no-end: false
#| pdf-placement: "htb!"
#| pdf-line-number: true

\begin{algorithm}
\caption{Training}
\begin{algorithmic}
\Repeat
  \State $t\sim \text{Uniform}(\lbrace 1,\cdots,T \rbrace)$ 
    \Comment{Sample random step}
  \State $x_0\sim q(x_0)$
    \Comment{Sample random initial data}
  \State $\varepsilon\sim \mathcal{N}(\mathbf{0},\mathbf{I})$
    \Comment{Sample random noise}
  \State $x_t = \sqrt{\overline{\alpha}_t}x_0 + \sqrt{1-\overline{\alpha}_t}\varepsilon$
    \Comment{Rand. step of rand. trajectory}
  \State Take gradient descent step on 
  \State Take gradient descent step on
  $\left\lVert \varepsilon - \varepsilon_{\theta}(x_t,t) \right\rVert^2$
    \Comment{Optimization}
\Until{converged}
\end{algorithmic}
\end{algorithm}
```

## 2

```pseudocode
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\Function{Quicksort}{$A,$ $p,$ and $r$}
  \If{$p < r$}
    \State $q = $ \Call{Partition}{$A, p, r$}
    \State \Call{Quicksort}{$A, p, q - 1$}
    \State \Call{Quicksort}{$A, q + 1, r$}
  \EndIf
\EndFunction
\Function{Partition}{$A, p, r$}
  \State $x = A[r]$
  \State $i = p - 1$
\EndFunction
\end{algorithmic}
\end{algorithm}
```

- **caption** Quicksort
- **Function** Quicksort $A,p,r$
  - **If** $p < r$
    - $q =$ Partition $A,p,r$
    - Quicksort$(A,p,q-1)$
    - Quicksort$(A,p+1,r)$
- **Function** Partition $A,p,r$
  - $x = A[r]$
  - $i = p-1$

## 5 

```pseudocode

\begin{algorithm}
\caption{Test control blocks - Part 1}
\begin{algorithmic}
\Function{Test-If}{}
  \If{<cond>}
    \State <block>
  \ElsIf{<cond>}
    \State <block>
  \Else
    \State <block>
  \EndIf
\EndFunction
\Function{Test-For}{$n$}
  \State $i \gets 0$
  \For{$i < n$}
    \Print $i$
    \State $i \gets i + 1$
  \EndFor
\EndFunction
\Function{Test-For-To}{$n$}
  \State $i \gets 0$
  \For{$i$ \To $n$}
    \Print $i$
  \EndFor
\EndFunction
\Function{Test-For-DownTo}{$n$}
  \For{$i \gets n$ \DownTo $0$}
    \Print $i$
  \EndFor
\EndFunction
\Function{Test-For-All}{$n$}
  \ForAll{$i \in \{0, 1, \cdots, n\}$}
    \Print $i$
  \EndFor
\EndFunction
\end{algorithmic}
\end{algorithm}

```


## 6

```pseudocode

\begin{algorithm}
\caption{Test control blocks - Part 1}
\begin{algorithmic}
\Function{Test-For-DownTo}{$n$}
  \For{$i = n$ \Downto $0$}
    \Print $i$
  \EndFor
\EndFunction
\Function{Test-For-All}{$n$}
  \ForAll{$i \in \{0, 1, \cdots, n\}$}
    \Print $i$
  \EndFor
\EndFunction
\end{algorithmic}
\end{algorithm}

```

- **Function** Test-For-DownTo $n$
  - **For** $i=n$ **downto** $0$
    - **print** $i$
